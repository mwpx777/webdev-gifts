{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mwpx7\\\\Documents\\\\GitHub\\\\webdev-gifts\\\\client\\\\src\\\\components\\\\CategoryMenu\\\\index.js\",\n    _s = $RefreshSig$();\n\n// // CATEGORY MENU\n// import React, { useEffect } from 'react';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_CATEGORIES } from '../../utils/queries';\n// import { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { idbPromise } from '../../utils/helpers';\n// function CategoryMenu({ setCategory }) {\n//     const [state, dispatch] = useStoreContext();\n//     const { categories } = state;\n//     const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n//     useEffect(() => {\n//         if (categoryData) {\n//             dispatch({\n//                 type: UPDATE_CATEGORIES,\n//                 categories: categoryData.categories\n//             });\n//             categoryData.categories.forEach(category => {\n//                 idbPromise('categories', 'put', category);\n//             });\n//         } else if (!loading) {\n//             idbPromise('categories', 'get').then(categories => {\n//                 dispatch({\n//                     type: UPDATE_CATEGORIES,\n//                     categories: categories\n//                 });\n//             });\n//         }\n//     }, [loading, categoryData, dispatch]);\n//     const handleClick = id => {\n//         dispatch({\n//             type: UPDATE_CURRENT_CATEGORY,\n//             currentCategory: id\n//         });\n//     };\n//     return (\n//         <div>\n//             <h2> Categories</h2>\n//             {categories.map(item => (\n//                 <button\n//                     key={item._id}\n//                     onClick={() => {\n//                         handleClick(item._id);\n//                     }}> {item.name}</button>\n//             ))}\n//         </div>\n//     );\n// };\n// export default CategoryMenu;\nimport React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CategoryMenu({\n  setCategory\n}) {\n  _s();\n\n  // const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  // const categories = categoryData?.categories || [];\n  // retreieve the state from global state object and dispatch method to update the state\n  const [state, dispatch] = useStoreContext(); // destructure categories out of global state\n\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES); // useEffect will run on component load, and when state changes in the component\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch\n    if (categoryData) {\n      // execute dispatch function wiht our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      }); // this will store categories in indexedDB with idbPromise helper function\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose a Category:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), categories.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleClick(item._id);\n      },\n      children: item.name\n    }, item._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CategoryMenu, \"SDRIRU8eW8nWYa6nQ+TDjEPgrC0=\", false, function () {\n  return [useStoreContext, useQuery];\n});\n\n_c = CategoryMenu;\nexport default CategoryMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryMenu\");","map":{"version":3,"sources":["C:/Users/mwpx7/Documents/GitHub/webdev-gifts/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useStoreContext","idbPromise","CategoryMenu","setCategory","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAAQC,iBAAR,EAA2BC,uBAA3B,QAAyD,qBAAzD;AACA,SAAQC,eAAR,QAA8B,yBAA9B;AAEA,SAAQC,UAAR,QAAyB,qBAAzB;;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAuC;AAAA;;AACrC;AACA;AAEA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,eAAe,EAAzC,CALqC,CAMrC;;AACA,QAAM;AAACM,IAAAA;AAAD,MAAeF,KAArB;AACA,QAAM;AAACG,IAAAA,OAAD;AAAUC,IAAAA,IAAI,EAAEC;AAAhB,MAAiCb,QAAQ,CAACC,gBAAD,CAA/C,CARqC,CAWrC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAGc,YAAH,EAAiB;AACf;AACAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEZ,iBADC;AAEPQ,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR,CAFe,CAMf;;AACAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CX,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBW,QAAtB,CAAV;AACD,OAFD;AAGD,KAVD,MAUO,IAAI,CAACL,OAAL,EAAa;AAClBN,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCY,IAAhC,CAAqCP,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEZ,iBADC;AAEPQ,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GApBQ,EAoBN,CAACC,OAAD,EAAUE,YAAV,EAAwBJ,QAAxB,CApBM,CAAT;;AAsBA,QAAMS,WAAW,GAAGC,EAAE,IAAI;AACxBV,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,uBADC;AAEPiB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGT,UAAU,CAACW,GAAX,CAAeC,IAAI,iBAClB;AAEE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,OAJH;AAAA,gBAMGD,IAAI,CAACE;AANR,OACOF,IAAI,CAACC,GADZ;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAxDQjB,Y;UAKmBF,e,EAGaJ,Q;;;KARhCM,Y;AA0DT,eAAeA,YAAf","sourcesContent":["// // CATEGORY MENU\n\n// import React, { useEffect } from 'react';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_CATEGORIES } from '../../utils/queries';\n// import { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { idbPromise } from '../../utils/helpers';\n\n// function CategoryMenu({ setCategory }) {\n//     const [state, dispatch] = useStoreContext();\n//     const { categories } = state;\n//     const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n//     useEffect(() => {\n//         if (categoryData) {\n//             dispatch({\n//                 type: UPDATE_CATEGORIES,\n//                 categories: categoryData.categories\n//             });\n//             categoryData.categories.forEach(category => {\n//                 idbPromise('categories', 'put', category);\n//             });\n//         } else if (!loading) {\n//             idbPromise('categories', 'get').then(categories => {\n//                 dispatch({\n//                     type: UPDATE_CATEGORIES,\n//                     categories: categories\n//                 });\n//             });\n//         }\n//     }, [loading, categoryData, dispatch]);\n\n//     const handleClick = id => {\n//         dispatch({\n//             type: UPDATE_CURRENT_CATEGORY,\n//             currentCategory: id\n//         });\n//     };\n\n//     return (\n//         <div>\n//             <h2> Categories</h2>\n//             {categories.map(item => (\n//                 <button\n//                     key={item._id}\n//                     onClick={() => {\n//                         handleClick(item._id);\n//                     }}> {item.name}</button>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default CategoryMenu;\n\nimport React, {useEffect} from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport {UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions';\nimport {useStoreContext} from '../../utils/GlobalState';\n\nimport {idbPromise} from '../../utils/helpers';\n\nfunction CategoryMenu({ setCategory }) {\n  // const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  // const categories = categoryData?.categories || [];\n\n  // retreieve the state from global state object and dispatch method to update the state\n  const [state, dispatch] = useStoreContext();\n  // destructure categories out of global state\n  const {categories} = state;\n  const {loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\n  // useEffect will run on component load, and when state changes in the component\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch\n    if(categoryData) {\n      // execute dispatch function wiht our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      // this will store categories in indexedDB with idbPromise helper function\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading){\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}