{"ast":null,"code":"//  DETAIL\n// import React, { useEffect, useState } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_PRODUCTS } from '../utils/queries';\n// import spinner from '../assets/spinner.gif'\n// import { useStoreContext } from '../utils/GlobalState';\n// import Cart from '../components/Cart';\n// import { idbPromise } from '../utils/helpers';\n// import {\n//     REMOVE_FROM_CART,\n//     UPDATE_CART_QUANTITY,\n//     ADD_TO_CART,\n//     UPDATE_PRODUCTS\n// } from '../utils/actions';\n// function Detail() {\n//     const [state, dispatch] = useStoreContext();\n//     const { id } = useParams();\n//     const { currentProduct, setCurrentProduct } = useState({});\n//     const [loading, data] = useQuery(QUERY_PRODUCTS);\n//     const { products, cart } = state;\n//     const addToCart = () => {\n//         const itemInCart = cart.find((cartItem) => cartItem._id === id);\n//         if (itemInCart) {\n//             dispatch({\n//                 type: UPDATE_CART_QUANTITY,\n//                 _id: id,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             });\n//             idbPromise('cart', 'put', {\n//                 ...itemInCart,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             })\n//         } else {\n//             dispatch({\n//                 type: ADD_TO_CART,\n//                 product: { ...currentProduct, purchaseQuantity: 1 }\n//             });\n//             idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n//         };\n//     };\n//     const removeFromCart = () => {\n//         dispatch({\n//             type: REMOVE_FROM_CART,\n//             _id: currentProduct._id\n//         });\n//         idbPromise('cart', 'delete', { ...currentProduct });\n//     };\n//     useEffect(() => {\n//         // products already in globalStore\n//         if (products.length) {\n//           setCurrentProduct(products.find(product => product._id === id));\n//           // retrieved from server\n//         } else if (data) {\n//           dispatch({\n//             type: UPDATE_PRODUCTS,\n//             products: data.products\n//           });\n//           data.products.forEach(product => {\n//             idbPromise('products', 'put', product);\n//           });\n//           // get cache from idb\n//         } else if (!loading) {\n//           idbPromise('products', 'get').then((products) => {\n//             dispatch({\n//               type: UPDATE_PRODUCTS,\n//               products: products\n//             });\n//           });\n//         }\n//       }, [products, data, loading, dispatch, id]);\n//     return (\n//         <>\n//             {currentProduct ? (\n//                 <div className=\"container my-1\">\n//                     <Link to=\"/\">\n//                         ← Back to Products\n//                 </Link>\n//                     <h2>{currentProduct.name}</h2>\n//                     <p>{currentProduct.description}</p>\n//                     <p>\n//                         <strong>Price: {currentProduct.price}{\" \"}</strong>\n//                         <button onClick={addToCart}>\n//                             Add To Cart!\n//                 </button>\n//                         <button\n//                             disables={!cart.find(p => p._id === currentProduct.id)}\n//                             onClick={removeFromCart}>\n//                             Remove From Cart\n//                 </button>\n//                     </p>\n//                     <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n//                 </div>\n//             ) : null}\n//             {\n//                 loading ? <img src={spinner} alt=\"loading spinner\" /> : null\n//             }\n//             <Cart />\n//         </>\n//     );\n// };\n// export default Detail;","map":{"version":3,"sources":["C:/Users/mwpx7/Documents/GitHub/webdev-gifts/client/src/pages/Detail.js"],"names":[],"mappingssourcesContent":["//  DETAIL\n\n// import React, { useEffect, useState } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_PRODUCTS } from '../utils/queries';\n// import spinner from '../assets/spinner.gif'\n// import { useStoreContext } from '../utils/GlobalState';\n// import Cart from '../components/Cart';\n// import { idbPromise } from '../utils/helpers';\n// import {\n//     REMOVE_FROM_CART,\n//     UPDATE_CART_QUANTITY,\n//     ADD_TO_CART,\n//     UPDATE_PRODUCTS\n// } from '../utils/actions';\n\n// function Detail() {\n//     const [state, dispatch] = useStoreContext();\n//     const { id } = useParams();\n//     const { currentProduct, setCurrentProduct } = useState({});\n//     const [loading, data] = useQuery(QUERY_PRODUCTS);\n//     const { products, cart } = state;\n\n//     const addToCart = () => {\n//         const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n//         if (itemInCart) {\n//             dispatch({\n//                 type: UPDATE_CART_QUANTITY,\n//                 _id: id,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             });\n\n//             idbPromise('cart', 'put', {\n//                 ...itemInCart,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             })\n//         } else {\n//             dispatch({\n//                 type: ADD_TO_CART,\n//                 product: { ...currentProduct, purchaseQuantity: 1 }\n//             });\n//             idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n//         };\n//     };\n\n//     const removeFromCart = () => {\n//         dispatch({\n//             type: REMOVE_FROM_CART,\n//             _id: currentProduct._id\n//         });\n//         idbPromise('cart', 'delete', { ...currentProduct });\n//     };\n//     useEffect(() => {\n//         // products already in globalStore\n//         if (products.length) {\n//           setCurrentProduct(products.find(product => product._id === id));\n    \n//           // retrieved from server\n//         } else if (data) {\n//           dispatch({\n//             type: UPDATE_PRODUCTS,\n//             products: data.products\n//           });\n    \n//           data.products.forEach(product => {\n//             idbPromise('products', 'put', product);\n//           });\n    \n    \n//           // get cache from idb\n//         } else if (!loading) {\n//           idbPromise('products', 'get').then((products) => {\n//             dispatch({\n//               type: UPDATE_PRODUCTS,\n//               products: products\n//             });\n//           });\n//         }\n//       }, [products, data, loading, dispatch, id]);\n\n//     return (\n//         <>\n//             {currentProduct ? (\n//                 <div className=\"container my-1\">\n//                     <Link to=\"/\">\n//                         ← Back to Products\n//                 </Link>\n//                     <h2>{currentProduct.name}</h2>\n//                     <p>{currentProduct.description}</p>\n//                     <p>\n//                         <strong>Price: {currentProduct.price}{\" \"}</strong>\n//                         <button onClick={addToCart}>\n//                             Add To Cart!\n//                 </button>\n//                         <button\n//                             disables={!cart.find(p => p._id === currentProduct.id)}\n//                             onClick={removeFromCart}>\n//                             Remove From Cart\n//                 </button>\n//                     </p>\n//                     <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n//                 </div>\n//             ) : null}\n//             {\n//                 loading ? <img src={spinner} alt=\"loading spinner\" /> : null\n//             }\n//             <Cart />\n//         </>\n//     );\n// };\n// export default Detail;"]},"metadata":{},"sourceType":"module"}