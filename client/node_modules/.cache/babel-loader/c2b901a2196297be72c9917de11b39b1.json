{"ast":null,"code":"// HELPERS\n// open connection to idb passing in name `storeName` and perform transaction using method and object values \nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to database `shop-shop` with version 1\n    const request = window.indexedDB.open('shop-shop', 1); // create variables to hold referenece to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed(or first time using the database), run this method to create the 3 object stores\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set \"primary\" key index to be `_id` of the data\n\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    }; // handle errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log('There was an error');\n    }; //  on database open success\n\n\n    request.onsuccess = function (e) {\n      // save a reference of the db to the `db` variable\n      db = request.result; // open a transaction do whatever we pass into `storeName` (must match one of the objectStore names)\n\n      tx = db.transaction(storeName, 'readwrite'); // save a reference to that objectStore 'products', 'categories', 'cart'\n\n      store = tx.objectStore(storeName);\n\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n\n          break;\n\n        case 'delete':\n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      ; // when transaction is complete, close the connection\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}\nexport default idbPromise;","map":{"version":3,"sources":["C:/Users/mwpx7/Documents/GitHub/webdev-gifts/client/src/utils/helpers.js"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA;AAEA;AACA,OAAO,SAASA,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AAClD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFsC,CAItC;;AACA,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CALsC,CAOtC;;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0B,UAAUC,CAAV,EAAa;AACrC,YAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADqC,CAGrC;;AACAL,MAAAA,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAjC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAnC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA7B;AACD,KAPD,CARsC,CAiBtC;;;AACAX,IAAAA,OAAO,CAACY,OAAR,GAAkB,UAAUJ,CAAV,EAAa;AAC7BK,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAFD,CAlBsC,CAsBtC;;;AACAd,IAAAA,OAAO,CAACe,SAAR,GAAoB,UAAUP,CAAV,EAAa;AAC/B;AACAJ,MAAAA,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAF+B,CAG/B;;AACAJ,MAAAA,EAAE,GAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,EAA0B,WAA1B,CAAL,CAJ+B,CAK/B;;AACAY,MAAAA,KAAK,GAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR;;AAEAU,MAAAA,EAAE,CAACQ,OAAH,GAAa,UAAUJ,CAAV,EAAa;AACxBK,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,CAArB;AACD,OAFD;;AAIA,cAAQb,MAAR;AACE,aAAK,KAAL;AACEW,UAAAA,KAAK,CAACY,GAAN,CAAUtB,MAAV;AACAE,UAAAA,OAAO,CAACF,MAAD,CAAP;AACA;;AACF,aAAK,KAAL;AACE,gBAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;;AACAD,UAAAA,GAAG,CAACJ,SAAJ,GAAgB,YAAY;AAC1BjB,YAAAA,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP;AACD,WAFD;;AAGA;;AACF,aAAK,QAAL;AACEH,UAAAA,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB;AACA;;AACF;AACET,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AAhBJ;;AAiBC,OA7B8B,CA+B/B;;AACAT,MAAAA,EAAE,CAACkB,UAAH,GAAgB,YAAY;AAC1BnB,QAAAA,EAAE,CAACoB,KAAH;AACD,OAFD;AAGD,KAnCD;AAqCD,GA5DM,CAAP;AA6DD;AAED,eAAe/B,UAAf","sourcesContent":["// HELPERS\n\n// open connection to idb passing in name `storeName` and perform transaction using method and object values \nexport function idbPromise(storeName, method, object) {\n    return new Promise((resolve, reject) => {\n      // open connection to database `shop-shop` with version 1\n      const request = window.indexedDB.open('shop-shop', 1);\n  \n      // create variables to hold referenece to the database, transaction (tx), and object store\n      let db, tx, store;\n  \n      // if version has changed(or first time using the database), run this method to create the 3 object stores\n      request.onupgradeneeded = function (e) {\n        const db = request.result;\n  \n        // create object store for each type of data and set \"primary\" key index to be `_id` of the data\n        db.createObjectStore('products', { keyPath: '_id' });\n        db.createObjectStore('categories', { keyPath: '_id' });\n        db.createObjectStore('cart', { keyPath: '_id' });\n      };\n  \n      // handle errors with connecting\n      request.onerror = function (e) {\n        console.log('There was an error');\n      };\n  \n      //  on database open success\n      request.onsuccess = function (e) {\n        // save a reference of the db to the `db` variable\n        db = request.result;\n        // open a transaction do whatever we pass into `storeName` (must match one of the objectStore names)\n        tx = db.transaction(storeName, 'readwrite');\n        // save a reference to that objectStore 'products', 'categories', 'cart'\n        store = tx.objectStore(storeName);\n  \n        db.onerror = function (e) {\n          console.log('error', e);\n        };\n  \n        switch (method) {\n          case 'put':\n            store.put(object);\n            resolve(object);\n            break;\n          case 'get':\n            const all = store.getAll();\n            all.onsuccess = function () {\n              resolve(all.result);\n            };\n            break;\n          case 'delete':\n            store.delete(object._id);\n            break;\n          default:\n            console.log('No valid method');\n            break;\n        };\n  \n        // when transaction is complete, close the connection\n        tx.oncomplete = function () {\n          db.close();\n        };\n      };\n  \n    });\n  }\n\n  export default idbPromise;"]},"metadata":{},"sourceType":"module"}