{"ast":null,"code":"var _s = $RefreshSig$();\n\n// REDUCERS\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nimport { useReducer } from 'react';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, ...action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        // return all items in cart that are not the action._id\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  _s();\n\n  return useReducer(reducer, initialState);\n}\n\n_s(useProductReducer, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");\n\n;","map":{"version":3,"sources":["C:/Users/mwpx7/Documents/GitHub/webdev-gifts/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","useReducer","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":";;AAAA;AAEA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP;AAYA,SAAQC,UAAR,QAAyB,OAAzB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKb,eAAL;AACI,aAAM,EACF,GAAGW,KADD;AAEFG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFR,OAAN;;AAIJ,SAAKb,iBAAL;AACI,aAAM,EACF,GAAGU,KADD;AAEFI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFV,OAAN;;AAIJ,SAAKb,uBAAL;AACI,aAAM,EACF,GAAGS,KADD;AAEFK,QAAAA,eAAe,EAAEJ,MAAM,CAACI;AAFtB,OAAN;;AAIJ,SAAKb,WAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFM,QAAAA,QAAQ,EAAE,IAFR;AAGFC,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACO,OAA1B;AAHJ,OAAN;;AAKJ,SAAKf,oBAAL;AACI,aAAM,EACF,GAAGO,KADD;AAEFO,QAAAA,IAAI,EAAC,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFH,OAAN;;AAIJ,SAAKT,gBAAL;AACQ,UAAIe,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AACxC;AACA,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACH,OAHc,CAAf;AAKA,aAAO,EACH,GAAGX,KADA;AAEHM,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHL,QAAAA,IAAI,EAAEE;AAHH,OAAP;;AAKR,SAAKd,oBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;AAC5B,cAAGP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA1B,EAA8B;AAC1BH,YAAAA,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;AACH;;AACD,iBAAON,OAAP;AACH,SALK;AAHH,OAAP;;AAUJ,SAAKZ,UAAL;AACI,aAAM,EACF,GAAGI,KADD;AAEFM,QAAAA,QAAQ,EAAE,KAFR;AAGFC,QAAAA,IAAI,EAAE;AAHJ,OAAN;;AAKJ,SAAKV,WAAL;AACI,aAAM,EACF,GAAGG,KADD;AAEFM,QAAAA,QAAQ,EAAE,CAACN,KAAK,CAACM;AAFf,OAAN;;AAIJ;AACI,aAAON,KAAP;AA7DR;AAgEH,CAjEM;AAmEP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;AAAA;;AAC5C,SAAOlB,UAAU,CAACC,OAAD,EAAUiB,YAAV,CAAjB;AACH;;GAFeD,iB;;AAEf","sourcesContent":["// REDUCERS\r\n\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\";\r\n\r\nimport {useReducer} from 'react'\r\n\r\nexport const reducer = (state, action) => {\r\n    switch(action.type){\r\n        case UPDATE_PRODUCTS:\r\n            return{\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n        case UPDATE_CATEGORIES:\r\n            return{\r\n                ...state,\r\n                categories: [...action.categories],\r\n            };\r\n        case UPDATE_CURRENT_CATEGORY:\r\n            return{\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n        case ADD_TO_CART:\r\n            return{\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: [...state.cart, ...action.product]\r\n            };\r\n        case ADD_MULTIPLE_TO_CART:\r\n            return{\r\n                ...state,\r\n                cart:[...state.cart, ...action.products]\r\n            };\r\n        case REMOVE_FROM_CART:\r\n                let newState = state.cart.filter(product => {\r\n                    // return all items in cart that are not the action._id\r\n                    return product._id !== action._id;\r\n                });\r\n    \r\n                return {\r\n                    ...state,\r\n                    cartOpen: newState.length > 0,\r\n                    cart: newState\r\n                };\r\n        case UPDATE_CART_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: state.cart.map(product => {\r\n                    if(action._id === product._id){\r\n                        product.purchaseQuantity = action.purchaseQuantity;\r\n                    }\r\n                    return product;\r\n                })\r\n            };\r\n        case CLEAR_CART:\r\n            return{\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n        case TOGGLE_CART:\r\n            return{\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            };\r\n        default:\r\n            return state;\r\n    \r\n    }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState)\r\n};"]},"metadata":{},"sourceType":"module"}