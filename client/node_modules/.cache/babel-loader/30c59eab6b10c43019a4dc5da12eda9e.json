{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mwpx7\\\\Documents\\\\GitHub\\\\webdev-gifts\\\\client\\\\src\\\\pages\\\\Detail.js\",\n    _s = $RefreshSig$();\n\n//  DETAIL\n// import React, { useEffect, useState } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_PRODUCTS } from '../utils/queries';\n// import spinner from '../assets/spinner.gif'\n// import { useStoreContext } from '../utils/GlobalState';\n// import Cart from '../components/Cart';\n// import { idbPromise } from '../utils/helpers';\n// import {\n//     REMOVE_FROM_CART,\n//     UPDATE_CART_QUANTITY,\n//     ADD_TO_CART,\n//     UPDATE_PRODUCTS\n// } from '../utils/actions';\n// function Detail() {\n//     const [state, dispatch] = useStoreContext();\n//     const { id } = useParams();\n//     const { currentProduct, setCurrentProduct } = useState({});\n//     const [loading, data] = useQuery(QUERY_PRODUCTS);\n//     const { products, cart } = state;\n//     const addToCart = () => {\n//         const itemInCart = cart.find((cartItem) => cartItem._id === id);\n//         if (itemInCart) {\n//             dispatch({\n//                 type: UPDATE_CART_QUANTITY,\n//                 _id: id,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             });\n//             idbPromise('cart', 'put', {\n//                 ...itemInCart,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             })\n//         } else {\n//             dispatch({\n//                 type: ADD_TO_CART,\n//                 product: { ...currentProduct, purchaseQuantity: 1 }\n//             });\n//             idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n//         };\n//     };\n//     const removeFromCart = () => {\n//         dispatch({\n//             type: REMOVE_FROM_CART,\n//             _id: currentProduct._id\n//         });\n//         idbPromise('cart', 'delete', { ...currentProduct });\n//     };\n//     useEffect(() => {\n//         // products already in globalStore\n//         if (products.length) {\n//           setCurrentProduct(products.find(product => product._id === id));\n//           // retrieved from server\n//         } else if (data) {\n//           dispatch({\n//             type: UPDATE_PRODUCTS,\n//             products: data.products\n//           });\n//           data.products.forEach(product => {\n//             idbPromise('products', 'put', product);\n//           });\n//           // get cache from idb\n//         } else if (!loading) {\n//           idbPromise('products', 'get').then((products) => {\n//             dispatch({\n//               type: UPDATE_PRODUCTS,\n//               products: products\n//             });\n//           });\n//         }\n//       }, [products, data, loading, dispatch, id]);\n//     return (\n//         <>\n//             {currentProduct ? (\n//                 <div className=\"container my-1\">\n//                     <Link to=\"/\">\n//                         ‚Üê Back to Products\n//                 </Link>\n//                     <h2>{currentProduct.name}</h2>\n//                     <p>{currentProduct.description}</p>\n//                     <p>\n//                         <strong>Price: {currentProduct.price}{\" \"}</strong>\n//                         <button onClick={addToCart}>\n//                             Add To Cart!\n//                 </button>\n//                         <button\n//                             disables={!cart.find(p => p._id === currentProduct.id)}\n//                             onClick={removeFromCart}>\n//                             Remove From Cart\n//                 </button>\n//                     </p>\n//                     <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n//                 </div>\n//             ) : null}\n//             {\n//                 loading ? <img src={spinner} alt=\"loading spinner\" /> : null\n//             }\n//             <Cart />\n//         </>\n//     );\n// };\n// export default Detail;\n// DETAIL\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif';\nimport { useStoreContext } from '../utils/GlobalState';\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Detail() {\n  _s();\n\n  const [state, dispatch] = useStoreContext();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const {\n    products,\n    cart\n  } = state; // ADD TO CART\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); // if updating cart quantity, use existing item data and increment purchaseQuantity value by 1\n\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      }); // if item isn't in cart, add it to current shopping cart in indexedDB\n\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n\n    ;\n  }; // REMOVE FROM CART\n\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    }); // upon removal from cart, delete the item from indexedDB using the `currentProduct._id` to locate item to remove\n\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  useEffect(() => {\n    // products already in globalStore\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id)); // retrieved from server\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      }); // get cache from idb\n    } else if (!loading) {\n      idbPromise('products', 'get').then(products => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentProduct ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-1\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"\\u2190 Back to Products\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentProduct.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), \"$\", currentProduct.price, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addToCart,\n          children: \"Add to Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disables: !cart.find(p => p._id === currentProduct.id),\n          onClick: removeFromCart,\n          children: \"Remove from Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `/images/${currentProduct.image}`,\n        alt: currentProduct.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }, this) : null, /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Detail, \"j5oJm1rgfQRxY+u7nbB1dKedEes=\", false, function () {\n  return [useStoreContext, useParams, useQuery];\n});\n\n_c = Detail;\n;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["C:/Users/mwpx7/Documents/GitHub/webdev-gifts/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","QUERY_PRODUCTS","spinner","useStoreContext","Cart","idbPromise","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","removeFromCart","length","forEach","then","name","description","price","p","image"],"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","sourcesContent":["//  DETAIL\n\n// import React, { useEffect, useState } from 'react';\n// import { Link, useParams } from 'react-router-dom';\n// import { useQuery } from '@apollo/react-hooks';\n// import { QUERY_PRODUCTS } from '../utils/queries';\n// import spinner from '../assets/spinner.gif'\n// import { useStoreContext } from '../utils/GlobalState';\n// import Cart from '../components/Cart';\n// import { idbPromise } from '../utils/helpers';\n// import {\n//     REMOVE_FROM_CART,\n//     UPDATE_CART_QUANTITY,\n//     ADD_TO_CART,\n//     UPDATE_PRODUCTS\n// } from '../utils/actions';\n\n// function Detail() {\n//     const [state, dispatch] = useStoreContext();\n//     const { id } = useParams();\n//     const { currentProduct, setCurrentProduct } = useState({});\n//     const [loading, data] = useQuery(QUERY_PRODUCTS);\n//     const { products, cart } = state;\n\n//     const addToCart = () => {\n//         const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n//         if (itemInCart) {\n//             dispatch({\n//                 type: UPDATE_CART_QUANTITY,\n//                 _id: id,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             });\n\n//             idbPromise('cart', 'put', {\n//                 ...itemInCart,\n//                 purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n//             })\n//         } else {\n//             dispatch({\n//                 type: ADD_TO_CART,\n//                 product: { ...currentProduct, purchaseQuantity: 1 }\n//             });\n//             idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n//         };\n//     };\n\n//     const removeFromCart = () => {\n//         dispatch({\n//             type: REMOVE_FROM_CART,\n//             _id: currentProduct._id\n//         });\n//         idbPromise('cart', 'delete', { ...currentProduct });\n//     };\n//     useEffect(() => {\n//         // products already in globalStore\n//         if (products.length) {\n//           setCurrentProduct(products.find(product => product._id === id));\n    \n//           // retrieved from server\n//         } else if (data) {\n//           dispatch({\n//             type: UPDATE_PRODUCTS,\n//             products: data.products\n//           });\n    \n//           data.products.forEach(product => {\n//             idbPromise('products', 'put', product);\n//           });\n    \n    \n//           // get cache from idb\n//         } else if (!loading) {\n//           idbPromise('products', 'get').then((products) => {\n//             dispatch({\n//               type: UPDATE_PRODUCTS,\n//               products: products\n//             });\n//           });\n//         }\n//       }, [products, data, loading, dispatch, id]);\n\n//     return (\n//         <>\n//             {currentProduct ? (\n//                 <div className=\"container my-1\">\n//                     <Link to=\"/\">\n//                         ‚Üê Back to Products\n//                 </Link>\n//                     <h2>{currentProduct.name}</h2>\n//                     <p>{currentProduct.description}</p>\n//                     <p>\n//                         <strong>Price: {currentProduct.price}{\" \"}</strong>\n//                         <button onClick={addToCart}>\n//                             Add To Cart!\n//                 </button>\n//                         <button\n//                             disables={!cart.find(p => p._id === currentProduct.id)}\n//                             onClick={removeFromCart}>\n//                             Remove From Cart\n//                 </button>\n//                     </p>\n//                     <img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n//                 </div>\n//             ) : null}\n//             {\n//                 loading ? <img src={spinner} alt=\"loading spinner\" /> : null\n//             }\n//             <Cart />\n//         </>\n//     );\n// };\n// export default Detail;\n\n// DETAIL\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nimport { useStoreContext } from '../utils/GlobalState';\n\nimport Cart from '../components/Cart'\nimport { idbPromise } from '../utils/helpers';\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS\n} from '../utils/actions';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  // ADD TO CART\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      // if updating cart quantity, use existing item data and increment purchaseQuantity value by 1\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if item isn't in cart, add it to current shopping cart in indexedDB\n      idbPromise('cart', 'put', {...currentProduct, purchaseQuantity: 1});\n    };\n  };\n\n  // REMOVE FROM CART\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    // upon removal from cart, delete the item from indexedDB using the `currentProduct._id` to locate item to remove\n    idbPromise('cart', 'delete', {...currentProduct});\n  };\n\n  useEffect(() => {\n    // products already in globalStore\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n\n      // retrieved from server\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n\n\n      // get cache from idb\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ‚Üê Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disables={!cart.find(p => p._id === currentProduct.id)}\n              onClick={removeFromCart}>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}